import React, { useState, useEffect } from 'react';
import { apiService } from '../../services/api';

const AgeSelector = ({ onSelect }) => {
  const [ageGroups, setAgeGroups] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadAgeGroups();
  }, []);

  const loadAgeGroups = async () => {
    try {
      const response = await apiService.getAgeGroups();
      setAgeGroups(response.data || []);
    } catch (error) {
      console.error('Error loading age groups:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      setAgeGroups([
        { id: '3-5', title: '3-5 –ª–µ—Ç' },
        { id: '6-8', title: '6-8 –ª–µ—Ç' },
        { id: '9-12', title: '9-12 –ª–µ—Ç' },
        { id: '13-17', title: '13-17 –ª–µ—Ç' },
        { id: '18+', title: '18+' }
      ]);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="age-screen">
        <div className="loading-spinner">
          <div>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã...</div>
        </div>
      </div>
    );
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  if (!ageGroups || ageGroups.length === 0) {
    return (
      <div className="age-screen">
        <h1 className="title">–£–ø—Å!</h1>
        <p className="subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã</p>
        <div className="glass-card">
          <div style={{ textAlign: 'center', color: '#e2bd48' }}>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="age-screen">
      <h1 className="title">–ü—Ä–∏–≤–µ—Ç!</h1>
      <p className="subtitle">–î–∞–≤–∞–π –Ω–∞–π–¥–µ–º –¥–ª—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ!</p>
      
      <div className="glass-card">
        <h2 className="section-title">–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</h2>
        
        {/* –ü–µ—Ä–≤—ã–µ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫–µ 2x2 - –ë–ï–ó —ç–º–æ–¥–∑–∏ */}
        <div className="age-grid">
          {ageGroups.slice(0, 4).map((age) => (
            <div
              key={age.id}
              onClick={() => onSelect(age.id)}
              className="age-button"
            >
              <span className="age-number">{age.title}</span>
            </div>
          ))}
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ 18+ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
        {ageGroups.length > 4 && (
          <div 
            className="age-button age-button-wide" 
            onClick={() => onSelect(ageGroups[4].id)}
          >
            <span className="age-number">{ageGroups[4].title}</span>
          </div>
        )}
      </div>
      
      <div className="bottom-hint">
        üí° –¢—ã –≤ –æ–¥–Ω–æ–º —à–∞–≥–µ –æ—Ç –∫–ª–∞—Å—Å–Ω—ã—Ö –∏–¥–µ–π!
      </div>
    </div>
  );
};

export default AgeSelector;