const { Pool } = require('pg');
const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase (–æ—Ç–∫—É–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º)
const SUPABASE_URL = 'https://rfqssjgpmhybebbgnwhm.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJmcXNzamdwbWh5YmViYmdud2htIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwODIxNTAsImV4cCI6MjA2NTY1ODE1MH0.l4LqwGrgEk_pH4YooIMZmkHB6_oe7Ehw2vD1rKYygZI';

// –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô DATABASE_URL –ò–ó RAILWAY!
const RAILWAY_DATABASE_URL = 'postgresql://postgres:JVTHicuijnpiqUCFBwKdbCoNADmkHuna@tramway.proxy.rlwy.net:20902/railway';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
const railwayPool = new Pool({
  connectionString: RAILWAY_DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function migrateData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö Supabase ‚Üí Railway PostgreSQL\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
    const client = await railwayPool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL —É—Å–ø–µ—à–Ω–æ');
    client.release();

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
    console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase...');
    const { data: supabaseActivities, error } = await supabase
      .from('activities')
      .select('*')
      .order('created_at', { ascending: true });

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ Supabase: ${error.message}`);
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${supabaseActivities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ Supabase`);

    if (supabaseActivities.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–∑ Supabase:');
    supabaseActivities.slice(0, 3).forEach((activity, index) => {
      console.log(`   ${index + 1}. ${activity.id}: ${activity.title}`);
    });

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Railway (–∫—Ä–æ–º–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏)
    console.log('\nüóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Railway...');
    await railwayPool.query('DELETE FROM activities WHERE id != \'test_railway_001\'');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Railway
    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Railway PostgreSQL...');
    let importedCount = 0;
    let errors = [];

    for (const activity of supabaseActivities) {
      try {
        await insertActivity(activity);
        importedCount++;
        
        if (importedCount % 5 === 0) {
          console.log(`   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount}/${supabaseActivities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
        }
      } catch (insertError) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${activity.id}: ${insertError.message}`);
        errors.push({ id: activity.id, error: insertError.message });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await railwayPool.query('SELECT COUNT(*) as total FROM activities');
    const totalImported = result.rows[0].total;

    console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Railway: ${totalImported}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
    
    if (errors.length > 0) {
      console.log(`‚ùå –û—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞: ${errors.length}`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const statsResult = await railwayPool.query(`
      SELECT category, COUNT(*) as count 
      FROM activities 
      WHERE id != 'test_railway_001'
      GROUP BY category 
      ORDER BY count DESC
    `);

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    statsResult.rows.forEach(row => {
      console.log(`   ${row.category}: ${row.count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
    });

    console.log('\n‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  } finally {
    await railwayPool.end();
    console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

async function insertActivity(activity) {
  const insertQuery = `
    INSERT INTO activities (
      id, title, short_description, full_description, category,
      age_groups, duration_minutes, difficulty, materials,
      instructions, skills_developed, season, location,
      premium, tags, rating, times_completed, created_at
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
    ON CONFLICT (id) DO UPDATE SET
      title = EXCLUDED.title,
      short_description = EXCLUDED.short_description,
      category = EXCLUDED.category
  `;

  const values = [
    activity.id,
    activity.title,
    activity.short_description || activity.title,
    activity.full_description || activity.short_description || activity.title,
    activity.category,
    activity.age_groups || [],
    activity.duration_minutes || 15,
    activity.difficulty || 'easy',
    activity.materials || [],
    activity.instructions || [],
    activity.skills_developed || [],
    activity.season || 'any',
    activity.location || 'indoor',
    activity.premium || false,
    activity.tags || [],
    activity.rating || 0,
    activity.times_completed || 0,
    activity.created_at || new Date()
  ];

  await railwayPool.query(insertQuery, values);
}

migrateData();