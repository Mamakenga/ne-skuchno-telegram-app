// backend/scripts/diagnose-csv.js

const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');

function diagnoseCsv() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSV —Ñ–∞–π–ª–∞...\n');
  
  const csvPath = path.join(__dirname, '..', '..', 'activities.csv');
  console.log('üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', csvPath);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(csvPath)) {
    console.log('‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç
  const fileContent = fs.readFileSync(csvPath, 'utf8');
  const lines = fileContent.split('\n');
  
  console.log('üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines.length}`);
  console.log(`üìù –ù–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${lines.filter(line => line.trim().length > 0).length}`);
  console.log(`üìù –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(fileContent.length / 1024)} KB\n`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  console.log('üîù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:');
  lines.slice(0, 3).forEach((line, index) => {
    console.log(`${index + 1}: ${line.substring(0, 100)}${line.length > 100 ? '...' : ''}`);
  });
  
  console.log('\nüîö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏:');
  lines.slice(-3).forEach((line, index) => {
    const lineNum = lines.length - 3 + index + 1;
    console.log(`${lineNum}: ${line.substring(0, 100)}${line.length > 100 ? '...' : ''}`);
  });
  
  // –ü–∞—Ä—Å–∏–º CSV –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
  let rowCount = 0;
  let validRows = 0;
  let errors = [];
  
  return new Promise((resolve) => {
    fs.createReadStream(csvPath)
      .pipe(csv())
      .on('data', (row) => {
        rowCount++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (row.id && row.title && row.category) {
          validRows++;
          console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${rowCount}: ${row.id} - ${row.title}`);
        } else {
          console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${rowCount}: –û–®–ò–ë–ö–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏`);
          console.log(`   ID: "${row.id}", Title: "${row.title}", Category: "${row.category}"`);
          errors.push({
            row: rowCount,
            data: row
          });
        }
      })
      .on('end', () => {
        console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ CSV —Å—Ç—Ä–æ–∫: ${rowCount}`);
        console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${validRows}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
        
        if (errors.length > 0) {
          console.log('\nüö® –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:');
          errors.forEach(error => {
            console.log(`–°—Ç—Ä–æ–∫–∞ ${error.row}:`, Object.keys(error.data).length, '–∫–æ–ª–æ–Ω–æ–∫');
            console.log('–ü–µ—Ä–≤—ã–µ –ø–æ–ª—è:', Object.entries(error.data).slice(0, 3));
          });
        }
        
        resolve();
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV:', error);
        resolve();
      });
  });
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  diagnoseCsv();
}

module.exports = diagnoseCsv;