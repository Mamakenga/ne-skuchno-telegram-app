// backend/scripts/debug-csv.js

const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');

async function debugCSV() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSV —Ñ–∞–π–ª–∞...\n');
  
  const csvPath = path.join(__dirname, '..', '..', 'activities.csv');
  console.log('üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', csvPath);
  
  if (!fs.existsSync(csvPath)) {
    console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  // 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç...');
  const fileContent = fs.readFileSync(csvPath, 'utf8');
  const lines = fileContent.split('\n');
  
  console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
  console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileContent.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
  
  // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
  console.log('üîù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞:');
  lines.slice(0, 3).forEach((line, index) => {
    console.log(`${index + 1}: "${line}"`);
    console.log(`   –î–ª–∏–Ω–∞: ${line.length}, –ó–∞–ø—è—Ç—ã—Ö: ${(line.match(/,/g) || []).length}`);
  });
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:');
  const headers = lines[0].split(',');
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${headers.length} –∫–æ–ª–æ–Ω–æ–∫:`);
  headers.forEach((header, index) => {
    console.log(`${index + 1}. "${header.trim()}"`);
  });
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π:');
  const firstDataLine = lines[1];
  console.log('–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', firstDataLine);
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—è—Ç—ã—Ö:', (firstDataLine.match(/,/g) || []).length);
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å –∑–∞–ø—è—Ç–æ–π:', (firstDataLine.match(/;/g) || []).length);
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–æ–≤:', (firstDataLine.match(/\t/g) || []).length);
  
  // 5. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å CSV
  console.log('\nüîß –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV...');
  let rowCount = 0;
  let firstRow = null;
  
  return new Promise((resolve) => {
    fs.createReadStream(csvPath)
      .pipe(csv())
      .on('headers', (headers) => {
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã:', headers);
      })
      .on('data', (row) => {
        rowCount++;
        if (rowCount === 1) {
          firstRow = row;
          console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:');
          console.log('  ID:', typeof row.id, `"${row.id}"`);
          console.log('  Title:', typeof row.title, `"${row.title}"`);
          console.log('  Category:', typeof row.category, `"${row.category}"`);
          console.log('  –í—Å–µ –∫–ª—é—á–∏:', Object.keys(row));
        }
        if (rowCount <= 3) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${rowCount}: ID="${row.id}", Title="${row.title}"`);
        }
      })
      .on('end', () => {
        console.log(`\nüìä –ò–¢–û–ì–û: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${rowCount} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
        
        if (firstRow) {
          console.log('\n‚úÖ CSV –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
          if (!firstRow.id) {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ ID –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          }
          if (!firstRow.title) {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ title –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          }
        } else {
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
        }
        
        resolve();
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', error);
        resolve();
      });
  });
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  debugCSV();
}

module.exports = debugCSV;