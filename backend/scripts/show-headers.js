// backend/scripts/show-headers.js

const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');

async function showHeaders() {
  console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV —Ñ–∞–π–ª–∞...\n');
  
  const csvPath = path.join(__dirname, '..', '..', 'activities.csv');
  
  if (!fs.existsSync(csvPath)) {
    console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
  const fileContent = fs.readFileSync(csvPath, 'utf8');
  const firstLine = fileContent.split('\n')[0];
  
  console.log('üìÑ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏):');
  console.log(`"${firstLine}"`);
  console.log('');
  
  console.log('üìã –†–∞–∑–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ –∑–∞–ø—è—Ç—ã–º:');
  const headers = firstLine.split(',');
  headers.forEach((header, index) => {
    console.log(`${index + 1}. "${header}" (–¥–ª–∏–Ω–∞: ${header.length})`);
    if (header.trim() !== header) {
      console.log(`   ‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã! –û—á–∏—â–µ–Ω–Ω–æ–µ: "${header.trim()}"`);
    }
  });
  
  // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –≤–∏–¥–∏—Ç:');
  
  return new Promise((resolve) => {
    let headersSeen = false;
    let firstDataRow = null;
    
    fs.createReadStream(csvPath)
      .pipe(csv())
      .on('headers', (parsedHeaders) => {
        console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –≤–∏–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
        parsedHeaders.forEach((header, index) => {
          console.log(`   ${index + 1}. "${header}"`);
        });
        headersSeen = true;
      })
      .on('data', (row) => {
        if (!firstDataRow) {
          firstDataRow = row;
          console.log('\nüìä –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
          Object.entries(row).forEach(([key, value]) => {
            console.log(`   ${key}: "${value}"`);
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
          console.log('\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π:');
          console.log(`   id: "${row.id}" (—Ç–∏–ø: ${typeof row.id})`);
          console.log(`   title: "${row.title}" (—Ç–∏–ø: ${typeof row.title})`);
          console.log(`   category: "${row.category}" (—Ç–∏–ø: ${typeof row.category})`);
        }
      })
      .on('end', () => {
        if (!headersSeen) {
          console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!');
        }
        if (!firstDataRow) {
          console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!');
        }
        resolve();
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        resolve();
      });
  });
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  showHeaders();
}

module.exports = showHeaders;
