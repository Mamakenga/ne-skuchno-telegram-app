// backend/scripts/supabase-import-csv-fixed.js

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤—ã
function parseStringToArray(str) {
  if (!str || str.trim() === '') return [];
  return str.split(',').map(item => item.trim()).filter(item => item.length > 0);
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
function parseInstructions(str) {
  if (!str || str.trim() === '') return [];
  return str.split('|').map(item => item.trim()).filter(item => item.length > 0);
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CSV —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function parseActivityFromCSV(row) {
  return {
    id: row.id.toString(),
    title: row.title,
    short_description: row.short_description,
    full_description: row.full_description,
    category: row.category,
    age_groups: parseStringToArray(row.age_groups),
    duration_minutes: parseInt(row.duration_minutes) || 15,
    difficulty: row.difficulty || 'easy',
    materials: parseStringToArray(row.materials),
    instructions: parseInstructions(row.instructions),
    skills_developed: parseStringToArray(row.skills_developed),
    season: row.season || 'any',
    location: row.location || 'indoor',
    premium: row.premium === 'true',
    tags: parseStringToArray(row.tags),
    
    // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
    video_url: null,
    image_url: null,
    site_url: `https://yoursite.com/activities/${row.id}`,
    has_detailed_content: !!(row.full_description && row.full_description.length > 50),
    
    // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    rating: 0,
    times_completed: 0
  };
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function validateActivity(activity) {
  const errors = [];
  
  if (!activity.id) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID');
  if (!activity.title) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ');
  if (!activity.category) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
  if (!activity.instructions || activity.instructions.length === 0) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
  }
  
  return errors;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importFromCSV() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ CSV –≤ Supabase...');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Supabase');
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨ –ö –§–ê–ô–õ–£
    const csvPath = path.join(__dirname, '..', '..', 'activities.csv');
    console.log('üìÇ –ò—â–µ–º CSV —Ñ–∞–π–ª:', csvPath);
    
    if (!fs.existsSync(csvPath)) {
      throw new Error(`CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    const { data: existingData, error: countError } = await supabase
      .from('activities')
      .select('id', { count: 'exact' });
    
    if (existingData && existingData.length > 0) {
      const { error: deleteError } = await supabase
        .from('activities')
        .delete()
        .neq('id', ''); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      
      if (deleteError) throw deleteError;
      console.log(`‚úÖ –£–¥–∞–ª–∏–ª–∏ ${existingData.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
    }
    
    const activities = [];
    const errors = [];
    
    return new Promise((resolve, reject) => {
      fs.createReadStream(csvPath)
        .pipe(csv())
        .on('data', (row) => {
          try {
            const activity = parseActivityFromCSV(row);
            const validationErrors = validateActivity(activity);
            
            if (validationErrors.length > 0) {
              errors.push({
                id: activity.id,
                title: activity.title,
                errors: validationErrors
              });
            } else {
              activities.push(activity);
              console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–ª–∏: ${activity.title} (${activity.id})`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:`, error);
            errors.push({
              row: JSON.stringify(row),
              error: error.message
            });
          }
        })
        .on('end', async () => {
          try {
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
            
            if (errors.length > 0) {
              console.log('\nüö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:');
              errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error.id || 'Unknown'}: ${error.errors ? error.errors.join(', ') : error.error}`);
              });
            }
            
            if (activities.length > 0) {
              console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase...');
              const { data, error } = await supabase
                .from('activities')
                .insert(activities);
              
              if (error) throw error;
              
              console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
              
              // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
              const { data: statsData } = await supabase
                .from('activities')
                .select('category');
              
              if (statsData) {
                const categoryStats = statsData.reduce((acc, item) => {
                  acc[item.category] = (acc[item.category] || 0) + 1;
                  return acc;
                }, {});
                
                console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
                Object.entries(categoryStats).forEach(([category, count]) => {
                  console.log(`${category}: ${count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
                });
              }
              
              // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
              const { data: samples } = await supabase
                .from('activities')
                .select('id, title, category, duration_minutes')
                .limit(3);
              
              if (samples) {
                console.log('\nüéØ –ü—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:');
                samples.forEach(activity => {
                  console.log(`- ${activity.title} (${activity.category}, ${activity.duration_minutes} –º–∏–Ω)`);
                });
              }
            } else {
              console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
            }
            
            console.log('\nüëã –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            resolve();
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
            reject(error);
          }
        })
        .on('error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV:', error);
          reject(error);
        });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
  importFromCSV();
}

module.exports = importFromCSV;