const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

class Activity {
  constructor(data) {
    Object.assign(this, data);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  static async find(filters = {}) {
    try {
      let query = supabase.from('activities').select('*');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.category) {
        query = query.eq('category', filters.category);
      }
      
      if (filters.age_group) {
        query = query.contains('age_groups', [filters.age_group]);
      }
      
      if (filters.premium !== undefined) {
        query = query.eq('premium', filters.premium);
      }
      
      if (filters.duration_min && filters.duration_max) {
        query = query.gte('duration_minutes', filters.duration_min)
                     .lte('duration_minutes', filters.duration_max);
      }
      
      if (filters.difficulty) {
        query = query.eq('difficulty', filters.difficulty);
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      if (filters.sort_by === 'rating') {
        query = query.order('rating', { ascending: false });
      } else if (filters.sort_by === 'popular') {
        query = query.order('times_completed', { ascending: false });
      } else {
        query = query.order('created_at', { ascending: false });
      }
      
      // –õ–∏–º–∏—Ç
      if (filters.limit) {
        query = query.limit(filters.limit);
      }
      
      const { data, error } = await query;
      
      if (error) throw error;
      
      return data.map(item => new Activity(item));
    } catch (error) {
      throw new Error(`Failed to fetch activities: ${error.message}`);
    }
  }

  // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ID
  static async findById(id) {
    try {
      const { data, error } = await supabase
        .from('activities')
        .select('*')
        .eq('id', id)
        .single();
      
      if (error) throw error;
      
      return data ? new Activity(data) : null;
    } catch (error) {
      throw new Error(`Failed to fetch activity: ${error.message}`);
    }
  }

  // –ù–∞–π—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static async findByCategory(category) {
    return this.find({ category });
  }

  // –ù–∞–π—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
  static async findByAgeGroup(ageGroup) {
    return this.find({ age_group: ageGroup });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  static async getRandom(count = 3, filters = {}) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const activities = await this.find(filters);
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const shuffled = activities.sort(() => 0.5 - Math.random());
      return shuffled.slice(0, count);
    } catch (error) {
      throw new Error(`Failed to get random activities: ${error.message}`);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static async create(activityData) {
    try {
      const { data, error } = await supabase
        .from('activities')
        .insert([activityData])
        .select()
        .single();
      
      if (error) throw error;
      
      return new Activity(data);
    } catch (error) {
      throw new Error(`Failed to create activity: ${error.message}`);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  async update(updateData) {
    try {
      const { data, error } = await supabase
        .from('activities')
        .update(updateData)
        .eq('id', this.id)
        .select()
        .single();
      
      if (error) throw error;
      
      Object.assign(this, data);
      return this;
    } catch (error) {
      throw new Error(`Failed to update activity: ${error.message}`);
    }
  }

  // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
  async incrementCompleted() {
    try {
      const { data, error } = await supabase
        .from('activities')
        .update({ 
          times_completed: this.times_completed + 1 
        })
        .eq('id', this.id)
        .select()
        .single();
      
      if (error) throw error;
      
      this.times_completed = data.times_completed;
      return this;
    } catch (error) {
      throw new Error(`Failed to increment completed: ${error.message}`);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
  async updateRating(newRating) {
    try {
      const totalRatings = this.times_completed;
      let updatedRating;
      
      if (totalRatings === 0) {
        updatedRating = newRating;
      } else {
        updatedRating = ((this.rating * totalRatings) + newRating) / (totalRatings + 1);
      }
      
      const { data, error } = await supabase
        .from('activities')
        .update({ 
          rating: Math.round(updatedRating * 10) / 10 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
        })
        .eq('id', this.id)
        .select()
        .single();
      
      if (error) throw error;
      
      this.rating = data.rating;
      return this;
    } catch (error) {
      throw new Error(`Failed to update rating: ${error.message}`);
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  async delete() {
    try {
      const { error } = await supabase
        .from('activities')
        .delete()
        .eq('id', this.id);
      
      if (error) throw error;
      
      return true;
    } catch (error) {
      throw new Error(`Failed to delete activity: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static async getStats() {
    try {
      const { data: totalCount } = await supabase
        .from('activities')
        .select('id', { count: 'exact' });

      const { data: categories } = await supabase
        .from('activities')
        .select('category')
        .then(({ data }) => {
          const counts = {};
          data.forEach(item => {
            counts[item.category] = (counts[item.category] || 0) + 1;
          });
          return { data: counts };
        });

      const { data: avgRating } = await supabase
        .from('activities')
        .select('rating')
        .then(({ data }) => {
          const sum = data.reduce((acc, item) => acc + item.rating, 0);
          return { data: sum / data.length };
        });

      return {
        total: totalCount.length,
        by_category: categories,
        average_rating: Math.round(avgRating * 10) / 10
      };
    } catch (error) {
      throw new Error(`Failed to get stats: ${error.message}`);
    }
  }

  // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  get duration_text() {
    if (this.duration_minutes <= 20) return '–ë—ã—Å—Ç—Ä–æ';
    if (this.duration_minutes <= 45) return '–°—Ä–µ–¥–Ω–µ';
    return '–î–æ–ª–≥–æ';
  }

  get difficulty_emoji() {
    const emojis = { easy: 'üòä', medium: 'ü§î', hard: 'üò§' };
    return emojis[this.difficulty] || 'üòä';
  }
}

module.exports = Activity;