const express = require('express');
const { Pool } = require('pg');
const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –∫–ª–∏–µ–Ω—Ç–∞
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORIES = [
  {
    id: "active_games",
    title: "–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞",
    emoji: "üèÉ‚Äç‚ôÇÔ∏è",
    description: "–°–ø–æ—Ä—Ç, –¥–≤–∏–∂–µ–Ω–∏–µ, —Ç–∞–Ω—Ü—ã",
    color: "#FF6B6B"
  },
  {
    id: "creativity", 
    title: "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
    emoji: "üé®",
    description: "–†–∏—Å–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–µ–ª–∫–∏, –º—É–∑—ã–∫–∞",
    color: "#4ECDC4"
  },
  {
    id: "learn_new",
    title: "–£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", 
    emoji: "üß†",
    description: "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∏–∑—É—á–µ–Ω–∏–µ",
    color: "#45B7D1"
  },
  {
    id: "cooking",
    title: "–ö—É–ª–∏–Ω–∞—Ä–∏—è",
    emoji: "üë®‚Äçüç≥", 
    description: "–ì–æ—Ç–æ–≤–∫–∞, –≤—ã–ø–µ—á–∫–∞",
    color: "#96CEB4"
  },
  {
    id: "gifts",
    title: "–°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
    emoji: "üéÅ",
    description: "–î–ª—è –¥—Ä—É–∑–µ–π, —Å–µ–º—å–∏",
    color: "#FFEAA7"
  },
  {
    id: "experiments",
    title: "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã", 
    emoji: "üî¨",
    description: "–ù–∞—É–∫–∞, –æ–ø—ã—Ç—ã",
    color: "#DDA0DD"
  },
  {
    id: "reading_stories",
    title: "–ß—Ç–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏",
    emoji: "üìö", 
    description: "–ö–Ω–∏–≥–∏, —Å–∫–∞–∑–∫–∏, –ø–∏—Å—å–º–æ",
    color: "#98D8C8"
  },
  {
    id: "surprise_me",
    title: "–£–¥–∏–≤–∏ –º–µ–Ω—è!",
    emoji: "üé≤",
    description: "–°–ª—É—á–∞–π–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
    color: "#F7DC6F"
  }
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
router.get('/', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ PostgreSQL
    const { rows: stats } = await pool.query(`
      SELECT category, COUNT(*) as activity_count 
      FROM activities 
      GROUP BY category
    `);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesWithStats = CATEGORIES.map(category => {
      const stat = stats.find(s => s.category === category.id);
      return {
        ...category,
        activity_count: stat ? parseInt(stat.activity_count) : 0
      };
    });
    
    res.json({
      success: true,
      data: categoriesWithStats,
      count: categoriesWithStats.length
    });
  } catch (error) {
    console.error('Error loading categories:', error);
    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    res.json({
      success: true,
      data: CATEGORIES,
      count: CATEGORIES.length
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.get('/:id', async (req, res) => {
  try {
    const category = CATEGORIES.find(cat => cat.id === req.params.id);
    
    if (!category) {
      return res.status(404).json({ 
        error: 'Category not found',
        id: req.params.id 
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { rows } = await pool.query(
      'SELECT COUNT(*) as activity_count FROM activities WHERE category = $1',
      [req.params.id]
    );
    
    res.json({
      success: true,
      data: {
        ...category,
        activity_count: parseInt(rows[0].activity_count)
      }
    });
  } catch (error) {
    console.error('Error loading category:', error);
    res.status(500).json({ 
      error: 'Failed to load category',
      message: error.message 
    });
  }
});

module.exports = router;