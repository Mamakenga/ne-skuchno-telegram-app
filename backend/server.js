const express = require('express');
const cors = require('cors');
require('dotenv').config();
const { Telegraf } = require('telegraf');

const Activity = require('./models/Activity');
const User = require('./models/User');

const app = express();
const PORT = process.env.PORT || 3000;


// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: [
    'http://localhost:3001', 
    'http://127.0.0.1:3001', 
    'http://localhost:3000', 
    'http://127.0.0.1:3000',
    'https://ne-skuchno-telegram-app.vercel.app',  // <- –î–û–ë–ê–í–õ–Ø–ï–ú VERCEL
    'https://ne-skuchno-telegram-app-*.vercel.app' // <- –ò PREVIEW –í–ï–†–°–ò–ò
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());

app.get('/', (req, res) => {
  res.json({
    app_name: "–ú–∞–º–∞, –º–Ω–µ —Å–∫—É—á–Ω–æ!",
    slogan: "–¢—ã—Å—è—á–∞ –∏ –æ–¥–Ω–∞ –∏–¥–µ—è –ø—Ä–æ—Ç–∏–≤ —Å–∫—É–∫–∏!",
    status: 'running',
    version: '1.0.0',
    bot_username: '@ne_skuchno_bot',
    description: 'Telegram Mini App –¥–ª—è –±–æ—Ä—å–±—ã —Å –¥–µ—Ç—Å–∫–æ–π —Å–∫—É–∫–æ–π',
    features: [
      'üé® 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
      'üë∂ –î–ª—è —Ä–µ–±—è—Ç –æ—Ç 3 –¥–æ 17 –ª–µ—Ç', 
      'üìù –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '‚è±Ô∏è –û—Ç 10 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤'
    ],
    database: 'Connected to MongoDB Atlas'
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString()
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.get('/api/categories', async (req, res) => {
  try {
    const categories = [
      { id: 'active_games', title: '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞', emoji: 'üèÉ‚Äç‚ôÇÔ∏è', description: '–°–ø–æ—Ä—Ç, –¥–≤–∏–∂–µ–Ω–∏–µ, —Ç–∞–Ω—Ü—ã', color: '#FF6B6B' },
      { id: 'creativity', title: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', emoji: 'üé®', description: '–†–∏—Å–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–µ–ª–∫–∏, –º—É–∑—ã–∫–∞', color: '#4ECDC4' },
      { id: 'learn_new', title: '–£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ', emoji: 'üß†', description: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∏–∑—É—á–µ–Ω–∏–µ', color: '#45B7D1' },
      { id: 'cooking', title: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', emoji: 'üë®‚Äçüç≥', description: '–ì–æ—Ç–æ–≤–∫–∞, –≤—ã–ø–µ—á–∫–∞', color: '#96CEB4' },
      { id: 'gifts', title: '–°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫', emoji: 'üéÅ', description: '–î–ª—è –¥—Ä—É–∑–µ–π, —Å–µ–º—å–∏', color: '#FFEAA7' },
      { id: 'experiments', title: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã', emoji: 'üî¨', description: '–ù–∞—É–∫–∞, –æ–ø—ã—Ç—ã', color: '#DDA0DD' },
      { id: 'reading_stories', title: '–ß—Ç–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏', emoji: 'üìö', description: '–ö–Ω–∏–≥–∏, —Å–∫–∞–∑–∫–∏, –ø–∏—Å—å–º–æ', color: '#98D8C8' },
      { id: 'surprise_me', title: '–£–¥–∏–≤–∏ –º–µ–Ω—è!', emoji: 'üé≤', description: '–°–ª—É—á–∞–π–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', color: '#F7DC6F' }
    ];
    
    res.json({
      success: true,
      data: categories,
      count: categories.length
    });
  } catch (error) {
    console.error('Error fetching categories:', error);
    res.status(500).json({ error: 'Failed to fetch categories' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/activities', async (req, res) => {
  try {
    const { 
      age, 
      category, 
      duration, 
      difficulty, 
      location, 
      premium, 
      limit = 10,
      random 
    } = req.query;
    
    // –í–†–ï–ú–ï–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï
    const testActivities = [
      {
        id: "creativity_001",
        title: "–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–æ–ª—å–≥–µ",
        category: "creativity",
        age_groups: ["3-5", "6-8"],
        duration_minutes: 15,
        difficulty: "easy",
        materials: ["—Ñ–æ–ª—å–≥–∞ –¥–ª—è –∑–∞–ø–µ–∫–∞–Ω–∏—è", "—Ü–≤–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã", "—Å–∫–æ—Ç—á"],
        instructions: [
          "–ü–æ–ª–æ–∂–∏ –Ω–∞ —Å—Ç–æ–ª –º–æ–Ω–µ—Ç–∫—É –∏ –Ω–∞–∫—Ä–æ–π —Ñ–æ–ª—å–≥–æ–π",
          "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ–ª—å–≥—É –∫ —Å—Ç–æ–ª—É –±—É–º–∞–∂–Ω—ã–º —Å–∫–æ—Ç—á–µ–º",
          "–¢—É–ø–æ–π –ø–∞–ª–æ—á–∫–æ–π –∏–ª–∏ –Ω–µ –æ—Å—Ç—Ä—ã–º –ø—Ä–æ—Å—Ç—ã–º –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞—à—Ç—Ä–∏—Ö—É–π —Ñ–æ–ª—å–≥—É –≤ —Ç–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ —Ñ–æ–ª—å–≥–∞",
          "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –∫–æ–Ω—Ç—É—Ä—ã –º–æ–Ω–µ—Ç—ã –ø—Ä–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ —Ñ–æ–ª—å–≥–µ",
          "–ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ–ª—å–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ –ª–∏—Å—Ç –±—É–º–∞–≥–∏"
        ],
        skills_developed: ["–º–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞", "—Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "—Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ"],
        season: "any",
        location: "indoor",
        premium: false,
        tags: ["—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "–±–ª–µ—Å—Ç—è—â–µ–µ", "–ø—Ä–æ—Å—Ç–æ–µ", "–±—ã—Å—Ç—Ä–æ"],
        rating: 4.5,
        times_completed: 12
      },
      {
        id: "creativity_002",
        title: "–ü–æ–¥–µ–ª–∫–∞ –∏–∑ –≤—Ç—É–ª–∫–∏",
        category: "creativity",
        age_groups: ["6-8", "9-12"],
        duration_minutes: 30,
        difficulty: "medium",
        materials: ["–≤—Ç—É–ª–∫–∞ –æ—Ç —Ç—É–∞–ª–µ—Ç–Ω–æ–π –±—É–º–∞–≥–∏", "—Ü–≤–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞", "–∫–ª–µ–π", "–Ω–æ–∂–Ω–∏—Ü—ã"],
        instructions: [
          "–û–±–∫–ª–µ–π –≤—Ç—É–ª–∫—É —Ü–≤–µ—Ç–Ω–æ–π –±—É–º–∞–≥–æ–π –∏–ª–∏ —Ä–∞—Å–∫—Ä–∞—Å—å –∫—Ä–∞—Å–∫–∞–º–∏",
          "–í—ã—Ä–µ–∂–∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: —É—à–∫–∏, –ª–∞–ø–∫–∏, —Ö–≤–æ—Å—Ç–∏–∫",
          "–ü—Ä–∏–∫–ª–µ–π –¥–µ—Ç–∞–ª–∏ –∫ –≤—Ç—É–ª–∫–µ",
          "–ù–∞—Ä–∏—Å—É–π –∏–ª–∏ –ø—Ä–∏–∫–ª–µ–π –≥–ª–∞–∑–∫–∏ –∏ –Ω–æ—Å–∏–∫"
        ],
        skills_developed: ["—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–º–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        season: "any",
        location: "indoor",
        premium: false,
        tags: ["–ø–æ–¥–µ–ª–∫–∏", "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞", "–∂–∏–≤–æ—Ç–Ω—ã–µ"],
        rating: 4.8,
        times_completed: 25
      },
      {
        id: "active_001",
        title: "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É–∏",
        category: "active_games", 
        age_groups: ["3-5", "6-8", "9-12"],
        duration_minutes: 15,
        difficulty: "easy",
        materials: ["–º—É–∑—ã–∫–∞", "–∫–æ–ª–æ–Ω–∫–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"],
        instructions: [
          "–í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é –º—É–∑—ã–∫—É",
          "–¢–∞–Ω—Ü—É–π –∫–∞–∫ —Ö–æ—á–µ—à—å, –¥–≤–∏–≥–∞–π—Å—è —Å–≤–æ–±–æ–¥–Ω–æ!",
          "–ö–æ–≥–¥–∞ –º—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è - –∑–∞–º—Ä–∏ —Å—Ç–∞—Ç—É–µ–π",
          "–ö—Ç–æ –ø–æ—à–µ–≤–µ–ª–∏–ª—Å—è –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º—É–∑—ã–∫–∏ - –≤—ã–±—ã–≤–∞–µ—Ç"
        ],
        skills_developed: ["–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", "—Å–ª—É—Ö", "—Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å", "—Ä–µ–∞–∫—Ü–∏—è"],
        season: "any",
        location: "indoor",
        premium: false,
        tags: ["—Ç–∞–Ω—Ü—ã", "–º—É–∑—ã–∫–∞", "–≤–µ—Å–µ–ª—å–µ"],
        rating: 4.9,
        times_completed: 45
      }
    ];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let filteredActivities = testActivities.filter(activity => {
      let matches = true;
      
      if (age && !activity.age_groups.includes(age)) {
        matches = false;
      }
      
      if (category && category !== 'surprise_me' && activity.category !== category) {
        matches = false;
      }
      
      return matches;
    });
    
    // –°–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è "–£–¥–∏–≤–∏ –º–µ–Ω—è!"
    if (random === 'true' || category === 'surprise_me') {
      filteredActivities = testActivities.sort(() => 0.5 - Math.random());
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    filteredActivities = filteredActivities.slice(0, parseInt(limit));
    
    res.json({
      success: true,
      data: filteredActivities,
      count: filteredActivities.length,
      filters_applied: {
        age,
        category,
        duration,
        difficulty,
        location,
        premium,
        random
      }
    });
    
  } catch (error) {
    console.error('Error fetching activities:', error);
    res.status(500).json({ error: 'Failed to fetch activities' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID
app.get('/api/activities/:id', async (req, res) => {
  try {
    const activity = await Activity.findOne({ id: req.params.id });
    
    if (!activity) {
      return res.status(404).json({ 
        success: false,
        error: 'Activity not found' 
      });
    }
    
    res.json({
      success: true,
      data: activity
    });
  } catch (error) {
    console.error('Error fetching activity:', error);
    res.status(500).json({ error: 'Failed to fetch activity' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
app.get('/api/age-groups', (req, res) => {
  try {
    const ageGroups = [
      { id: '3-5', title: '3-5 –ª–µ—Ç', emoji: 'üë∂', description: '–î–æ—à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '6-8', title: '6-8 –ª–µ—Ç', emoji: 'üßí', description: '–ú–ª–∞–¥—à–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '9-12', title: '9-12 –ª–µ—Ç', emoji: 'üë¶', description: '–°—Ä–µ–¥–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '13-16', title: '13-16 –ª–µ—Ç', emoji: 'üë®‚Äçüéì', description: '–ü–æ–¥—Ä–æ—Å—Ç–∫–∏' },
      { id: '17+', title: '17+ –ª–µ—Ç', emoji: 'üë®', description: '–°—Ç–∞—Ä—à–∏–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏' },
      { id: 'adult', title: '–í–∑—Ä–æ—Å–ª—ã–π', emoji: 'üë®‚Äçüíº', description: '–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π' }
    ];
    
    res.json({
      success: true,
      data: ageGroups,
      count: ageGroups.length
    });
  } catch (error) {
    console.error('Error fetching age groups:', error);
    res.status(500).json({ error: 'Failed to fetch age groups' });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/stats', async (req, res) => {
  try {
    const totalActivities = await Activity.countDocuments();
    const categories = await Activity.distinct('category');
    
    const categoryStats = await Activity.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 }
        }
      }
    ]);
    
    res.json({
      success: true,
      data: {
        total_activities: totalActivities,
        total_categories: categories.length,
        categories: categoryStats
      }
    });
  } catch (error) {
    console.error('Error fetching stats:', error);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Telegram Bot
let bot;
if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN.length > 20) {
  bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
  
  bot.start(async (ctx) => {
    const user = ctx.from;
    
    try {
      await User.findOneAndUpdate(
        { telegram_id: user.id.toString() },
        {
          telegram_id: user.id.toString(),
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name
        },
        { upsert: true, new: true }
      );
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', user.first_name);
    } catch (error) {
      console.error('Error creating user:', error);
    }
    
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

- –†–µ–±–µ–Ω–æ–∫ —Å–∏–¥–∏—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ —Å—Ç—Ä–∞–¥–∞–µ—Ç –æ—Ç —Å–∫—É–∫–∏?
- –ù–µ –∑–Ω–∞–µ—à—å, —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?
üò© –ó–Ω–∞–∫–æ–º–æ?

üéØ –ï—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ!

–ù–∞—à–µ –ë–ï–°–ü–õ–ê–¢–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç:
‚úÖ –ó–∞–Ω—è—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ —Å–µ–±—è –Ω–∞–¥–æ–ª–≥–æ
‚úÖ –†–∞–∑–≤–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏  
‚úÖ –£–∫—Ä–µ–ø–∏—Ç—å —Å–≤—è–∑—å —Å —Å–µ–º—å–µ–π
‚úÖ –ó–∞–±—ã—Ç—å –ø—Ä–æ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–∏–ª–µ "–º–Ω–µ —Å–∫—É—á–Ω–æ"

üéÅ –ë–µ–∑ –∑–∞—Ç—Ä–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –¥–æ–º–∞!

üëá –ñ–º–∏ –∫–Ω–æ–ø–∫—É ‚Üí "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
–í—ã–±–∏—Ä–∞–π –≤–æ–∑—Ä–∞—Å—Ç - –∏ –ø–æ–ª—É—á–∞–π 3 –∏–¥–µ–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ`;

    await ctx.reply(welcomeMessage);
  });
  
  bot.command('random', async (ctx) => {
    try {
      const randomActivity = await Activity.aggregate([{ $sample: { size: 1 } }]);
      
      if (randomActivity.length > 0) {
        const activity = randomActivity[0];
        
        const activityMessage = `üé≤ **${activity.title}**

üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${activity.category}
üë∂ **–í–æ–∑—Ä–∞—Å—Ç:** ${activity.age_groups.join(', ')} –ª–µ—Ç
‚è±Ô∏è **–í—Ä–µ–º—è:** ${activity.duration_minutes} –º–∏–Ω—É—Ç
üìä **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** ${activity.difficulty}

**–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:**
${activity.materials.map(m => `‚Ä¢ ${m}`).join('\n')}

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
${activity.instructions.map((inst, i) => `${i + 1}. ${inst}`).join('\n')}

–ü–æ–ø—Ä–æ–±—É–π –∏ –æ—Ü–µ–Ω–∏! ‚≠ê`;

        await ctx.reply(activityMessage);
      } else {
        await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ üòî');
      }
    } catch (error) {
      console.error('Error fetching random activity:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üòî');
    }
  });
  
  bot.launch();
  console.log('ü§ñ Telegraf Bot "–ú–∞–º–∞, –º–Ω–µ —Å–∫—É—á–Ω–æ!" –∑–∞–ø—É—â–µ–Ω');
} else {
  console.log('‚ö†Ô∏è Telegram Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// ===== SERVER START =====
async function startServer() {
  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB - Supabase –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  console.log('‚úÖ Using Supabase as database');
  
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üìç Environment: ${process.env.NODE_ENV}`);
    console.log(`üåê Health check: http://localhost:${PORT}/health`);
    console.log(`üóÑÔ∏è Database: Supabase`);
  });
}

startServer().catch(error => {
  console.error('‚ùå Failed to start server:', error);
  process.exit(1);
});