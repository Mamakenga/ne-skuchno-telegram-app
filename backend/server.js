const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: [
    'http://localhost:3001', 
    'http://127.0.0.1:3001', 
    'http://localhost:3000', 
    'http://127.0.0.1:3000',
    'https://ne-skuchno-telegram-app.vercel.app',  // Vercel —Å–∞–π—Ç
    'https://ne-skuchno-telegram-app-*.vercel.app', // Preview –≤–µ—Ä—Å–∏–∏
    'https://ne-skuchno-telegram-app-git-main-mamakengas-projects.vercel.app' // –ü–æ–ª–Ω—ã–π URL
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// API Routes - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
app.use('/api/activities', require('./routes/activities'));
app.use('/api/categories', require('./routes/categories'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    app_name: "–ú–∞–º–∞, –º–Ω–µ —Å–∫—É—á–Ω–æ!",
    slogan: "–¢—ã—Å—è—á–∞ –∏ –æ–¥–Ω–∞ –∏–¥–µ—è –ø—Ä–æ—Ç–∏–≤ —Å–∫—É–∫–∏!",
    status: 'running',
    version: '1.0.0',
    bot_username: '@ne_skuchno_bot',
    description: 'Telegram Mini App –¥–ª—è –±–æ—Ä—å–±—ã —Å –¥–µ—Ç—Å–∫–æ–π —Å–∫—É–∫–æ–π',
    features: [
      'üé® 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
      'üë∂ –î–ª—è —Ä–µ–±—è—Ç –æ—Ç 3 –¥–æ 17 –ª–µ—Ç –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö', 
      'üìù –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '‚è±Ô∏è –û—Ç 10 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤'
    ],
    database: 'Connected to Supabase',
    endpoints: {
      activities: '/api/activities',
      categories: '/api/categories',
      health: '/health'
    }
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    version: '1.0.0',
    database: 'Supabase',
    supabase_configured: !!(process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_KEY)
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
app.get('/api/age-groups', (req, res) => {
  try {
    const ageGroups = [
      { id: '3-5', title: '3-5 –ª–µ—Ç', emoji: 'üë∂', description: '–î–æ—à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '6-8', title: '6-8 –ª–µ—Ç', emoji: 'üßí', description: '–ú–ª–∞–¥—à–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '9-12', title: '9-12 –ª–µ—Ç', emoji: 'üë¶', description: '–°—Ä–µ–¥–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏' },
      { id: '13-17', title: '13-17 –ª–µ—Ç', emoji: 'üë®‚Äçüéì', description: '–ü–æ–¥—Ä–æ—Å—Ç–∫–∏' },
      { id: '18+', title: '18+ –ª–µ—Ç', emoji: 'üë®', description: '–í–∑—Ä–æ—Å–ª—ã–µ' },
    ];
    
    res.json({
      success: true,
      data: ageGroups,
      count: ageGroups.length
    });
  } catch (error) {
    console.error('Error fetching age groups:', error);
    res.status(500).json({ error: 'Failed to fetch age groups' });
  }
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Route not found',
    path: req.originalUrl,
    method: req.method,
    available_endpoints: [
      'GET /',
      'GET /health',
      'GET /api/activities',
      'GET /api/categories',
      'GET /api/age-groups'
    ]
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Error:', err.message);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// ===== SERVER START =====
async function startServer() {
  console.log('‚úÖ Using Supabase as database');
  console.log('üîß Supabase URL configured:', !!process.env.SUPABASE_URL);
  console.log('üîë Supabase keys configured:', !!process.env.SUPABASE_SERVICE_KEY);
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Server "–ú–∞–º–∞, –º–Ω–µ —Å–∫—É—á–Ω–æ!" running on port ${PORT}`);
    console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üåê Health check: http://localhost:${PORT}/health`);
    console.log(`üîó API base: http://localhost:${PORT}/api`);
    console.log(`üóÑÔ∏è Database: Supabase PostgreSQL`);
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer().catch(error => {
  console.error('‚ùå Failed to start server:', error);
  process.exit(1);
});

module.exports = app;