const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// ===== MIDDLEWARE =====
app.use(helmet({
  contentSecurityPolicy: false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
}));
app.use(compression());
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*',
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
  });
}

// ===== ROUTES =====
// –ë–∞–∑–æ–≤—ã–µ API routes
app.use('/api/activities', require('./routes/activities'));
app.use('/api/categories', require('./routes/categories'));
app.use('/api/users', require('./routes/users'));

// Telegram webhook (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
// app.use('/webhook', require('./routes/telegram'));

// –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è –±—É–¥—É—â–µ–≥–æ frontend)
app.use(express.static('public'));

// ===== HEALTH CHECK =====
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    version: '1.0.0',
    supabase_connected: !!(process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_KEY)
  });
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Activity Telegram App API',
    version: '1.0.0',
    endpoints: {
      health: '/health',
      activities: '/api/activities',
      categories: '/api/categories', 
      users: '/api/users'
    },
    database: 'Supabase PostgreSQL'
  });
});

// ===== ERROR HANDLING =====
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Route not found',
    path: req.originalUrl,
    method: req.method
  });
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Error:', err.stack);
  
  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stack trace –≤ production
  const error = process.env.NODE_ENV === 'production' 
    ? { message: 'Internal server error' }
    : { message: err.message, stack: err.stack };
  
  res.status(500).json({ error });
});

// ===== SERVER START =====
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üåê Health check: http://localhost:${PORT}/health`);
  console.log(`üîó API base: http://localhost:${PORT}/api`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_KEY) {
    console.log('‚úÖ Supabase configuration found');
  } else {
    console.log('‚ö†Ô∏è Supabase configuration missing');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è Shutting down server...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚èπÔ∏è Server terminated');
  process.exit(0);
});

module.exports = app;